<html>
	<head>
		<title>SRD.Deferred :: Examples</title>
		<style type='text/css'>
			#console {color: Green; font-size: 150%;}
		</style>
		<script type='text/javascript' src='console.js'></script>
		<script type='text/javascript' src='../Js/SRD.Namespace.js'></script>
		<script type='text/javascript' src='../Js/SRD.Type.js'></script>
		<script type='text/javascript' src='../Js/SRD.Deferred.js'></script>

		<script type='text/javascript'>
			"use strict";
			window.addEventListener('load', function()
				{
					// Using multitasking. Can work with or without SRD.Namespace
					var multitasking = typeof ns !== 'undefined' ? ns('SRD.Multitasking') : this;

					// Simple create deferred
					var deferred = new multitasking.Deferred();
					writeLine('Deferred created. deferred instanceof SRD.Deferred ===' + (deferred instanceof multitasking.Deferred));

					// Call Deferred.single
					multitasking.Deferred.single(this, 
						function(parameter)
						{
							writeLine('Sync func #1 call with \'' + parameter + '\' parameter.');
							return 'The string result.';
						}, 'The func string parameter')
						.onSuccess(function(callResult)
							{
								writeLine('func #1 on success handler called. Result is: \'' + callResult + '\'');
							})
						.single(this, writeLine, 'Sync func #2 also called...')
						.onSuccess(function(callResult)
						{
							writeLine('And func #2 on success handled too !');
						})
						.single(this, function()
						{
							// Now we will make a mistake !
							var notExists = someObjects.notExistingProperty;
						})
						.onSuccess(function(callResult)
						{
							// This will never called !
							writeLine('This shouldn\'t be written !!!');
						})
						.onError(function(error)
						{
							//Error handler have to be executed !
							writeLine('Error happens: ' + error.message);
						});

					// Async example
					var     Nine = 9,
						Ten = 10,
						Eleven = 11;

					var sharedContext = { globalContext: window, setTimeout: window.setTimeout, count: 0 };

					function execWorker(context)
					{
						var Timeout = 200,
							deferred = new multitasking.Deferred();

						function worker()
						{
							writeLine('Worker executing... Count:' + (++context.count));
			
							if(context.count < Eleven)
							{
								context.globalContext.setTimeout(worker, Timeout);
							}

							if(context.count === Eleven)
							{
								deferred.done(context);
							}
							else if(context.count === Ten)
							{
								deferred.failed(new Error('Fail simulation.'));
							}
	        				}

						context.globalContext.setTimeout(worker, Timeout);

						return deferred;
					}


					multitasking.Deferred
						.single(this, execWorker, sharedContext)
						.onSuccess(function(){ writeLine('Worker successfully executed.');})
						.onError(function(error) { writeLine('Error: ' + error.message);});
        			}, false);

		</script>
	</head>
	<body>
		<ul id='console' />
	</body>
</html>