<!DOCTYPE html>
<html>
	<head>
		<title>SRD.Type :: Examples</title>
		<style type='text/css'>
			.console {color: #669922; font-size: 100%;}
			h2 { font-family: Tahoma; background-color: purple; color: white; padding-top: 4px; padding-bottom: 4px; padding-right: 32px; padding-left: 8px; }
			h3 { font-family: Tahoma; color: fray; }
			ul { list-style-type: square; }
			li { font-family: 'Courier New'; font-size: 100%; }
		</style>
		<script type='text/javascript' src='../Js/SRD.Type.js'></script>
		<script type='text/javascript'>

			function MyClass()
			{
			}

			var AnonymousClass = function()
			{
			}
		
			window.addEventListener('load', function()
			{
				var One = 1, TagUl = 'ul';
				
				var getLastSection = function()
				{
					var sections = document.getElementsByTagName(TagUl);

					return sections[sections.length - One];
				}

				function addSection(header)
				{
					var TagH2Begin = '<h2>', 
						TagH2End = '</h2>';

					document.body.innerHTML += TagH2Begin + header + TagH2End;
				}

				function addSubSection(header)
				{
					var TagH3Begin = '<h3>',
						TagH3End = '</h3>',
						ConsoleTag = '<ul class=\'console\' />';

					document.body.innerHTML += TagH3Begin + header + TagH3End + ConsoleTag ;
				}

				function writeLine(message)
				{
					var TagLiBegin = '<li>', TagLiEnd = '</li>';
	        			getLastSection().innerHTML += TagLiBegin + message + TagLiEnd;
				}



				addSection('typeOf returns a Type instance with overriden valueOf which returns the fulll type name.');
				addSubSection('Value types')

				writeLine('typeOf(true) == \'' + typeOf(true) + '\'');
				writeLine('typeOf(1) == \'' + typeOf(1) + '\'');
				writeLine('typeOf(NaN) == \'' + typeOf(NaN) + '\'');
				writeLine('typeOf(\'This is a native string.\') == \'' + typeOf('This is a native string.') + '\'');
				addSubSection('Reference types');
				writeLine('typeOf(new String(\'This is a boxed string.\')) == \'' + typeOf(new String('This is a boxed string.')) + '\'');
				writeLine('typeOf() == \'' + typeOf() + '\'');
				writeLine('typeOf([]) == \'' + typeOf([]) + '\'');
				writeLine('typeOf({}) == \'' + typeOf({}) + '\'');
				writeLine('typeOf(MyClass) == \'' + typeOf(MyClass) + '\'');
				writeLine('typeOf(AnonymousClass) == \'' + typeOf(AnonymousClass) + '\'');
				writeLine('typeOf(/\s+/) === \'' + typeOf(/\s+/) + '\'');
				writeLine('typeOf(new RegExp(\'\w+\')) == \'' + typeOf(new RegExp('\w+')) + '\'');
				writeLine('typeOf(window) === \'' + typeOf(window) + '\'');
				writeLine('typeOf(window.document) == \'' + typeOf(window.document) + '\'');
				writeLine('typeOf(window.document.body) == \'' + typeOf(window.document.body) + '\'');
				writeLine('typeOf(Math) === \'' + typeOf(Math) + '\'');
				writeLine('typeOf((\'Test\').substr) == \'' + typeOf(('Test').substr) + '\'');
				writeLine('typeOf((new String (\'Test\')).substr) == \'' + typeOf((new String('Test')).substr) + '\'');
				writeLine('typeOf(window.document.getElementById(\'console\')) == \'' + typeOf(window.document.getElementsByTagName(TagUl)) + '\'');

				addSection('typeOf returns a Type instance. This is a type members usage.');
				addSubSection('Value types');
				writeLine('typeOf(false).isBoolean() == ' + typeOf(false).isBoolean());
        			writeLine('typeOf(123).isNumber() == ' + typeOf(123).isNumber());
        			writeLine('typeOf(NaN).isNumber() == ' + typeOf(NaN).isNumber());
				writeLine('typeOf(\'This is a native string.\').isString() == ' + typeOf('This is a string.').isString());
				writeLine('typeOf(\'This is a native string.\').isString().isNative() == ' + typeOf('This is a native string.').isString().isNative());
				writeLine('typeOf(\'This is a native string.\').isString().isBoxed() == ' + typeOf('This is a native string.').isString().isBoxed());

				addSubSection('Reference types');
				writeLine('typeOf(null).isNull() == ' + typeOf(null).isNull());
				writeLine('typeOf(undefined).isUndefined() == ' + typeOf(undefined).isUndefined());

				writeLine('typeOf(new String(\'This is a boxed string.\')).isString() == ' + typeOf(new String('This is a boxed string.')).isString());
				writeLine('typeOf(new String(\'This is a boxed string.\')).isString().isBoxed() == ' + typeOf(new String('This is a boxed string.')).isString().isBoxed());
				writeLine('typeOf(new String(\'This is a boxed string.\')).isString().isNative() == ' + typeOf(new String('This is a boxed string.')).isString().isNative());
        			writeLine('typeOf([]).isArray() == ' + typeOf([]).isArray());
				writeLine('typeOf({}).isObject() == ' + typeOf({}).isObject());

				addSubSection('Classes')
				writeLine('typeOf(MyClass).isType() == ' + typeOf(MyClass).isType());
				writeLine('typeOf(MyClass).isType().isAnonymous() == ' + typeOf(MyClass).isType().classType().isAnonymous());
				writeLine('typeOf(MyClass).isType().className() == ' + typeOf(MyClass).isType().classType().className());


				writeLine('typeOf(AnonymousClass).isType() == ' + typeOf(AnonymousClass).isType());
				writeLine('typeOf(AnonymousClass).isType().isAnonymous() == ' + typeOf(AnonymousClass).isType().classType().isAnonymous());
				try
				{
					typeOf(AnonymousClass).isType().classType().className();
				}
				catch(error)
				{
					writeLine('typeOf(AnonymousClass).isType().className() throw a new Error: ' + error);
				}




			}, false);
		</script>
	<head>
	<body>
		<ul id='console' />
	</body>
</html>